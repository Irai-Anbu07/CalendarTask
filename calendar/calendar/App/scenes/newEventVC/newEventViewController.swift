//
//  newEventViewController.swift
//  calendar
//
//  Created by iraiAnbu on 30/11/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



class newEventViewController: UIViewController, newEventDisplayLogic
{
    
    // MARK: View lifecycle
    
    let dropDown = DropDown()
    
    private lazy var titleTextField  =  UITextField()
    
    private lazy var notificationButton = UIButton()
    
    private lazy var timePicker = UIDatePicker()
    
    private lazy var timeButton = UIButton()
    
    private lazy var doneButton = UIButton()
    
    lazy var selectedDate = Date()
    
    var hours:Int?
    
    var minutes:Int?
    
    var alertTime:Int?
    
    var textFieldTitle:String?
    
    var eventTime:String?
    
    var alert:String?
    
    
    
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        appendSubViews()
        
        addConstraints()
        
        updateUI()
                
        addTapGesture()
        
    }
    
    func appendSubViews() {
        let subViews = [ titleTextField , notificationButton , timeButton  ,timePicker , doneButton ]
        
        subViews.forEach {
            view.addSubview($0)
            $0.translatesAutoresizingMaskIntoConstraints = false
            view.bringSubviewToFront($0)
        }
    }
    
    
    func addConstraints() {
        
        var constraints = [
            titleTextField.leadingAnchor.constraint(
                equalTo: view.readableContentGuide.leadingAnchor , constant: 10),
            titleTextField.trailingAnchor.constraint(
                equalTo: view.readableContentGuide.trailingAnchor , constant: 10),
            titleTextField.topAnchor.constraint(equalTo: view.readableContentGuide.topAnchor , constant: 30),
            titleTextField.heightAnchor.constraint(equalToConstant: 50),
        ]
        
        
        constraints.append(contentsOf: [
            
            
            timeButton.leadingAnchor.constraint(
                equalTo: view.readableContentGuide.leadingAnchor , constant: 10),
            timeButton.trailingAnchor.constraint(
                equalTo: view.readableContentGuide.trailingAnchor , constant: -10),
            timeButton.topAnchor.constraint(equalTo: titleTextField.bottomAnchor , constant: 20),
            timeButton.heightAnchor.constraint(equalToConstant: 50),
            
            
            notificationButton.leadingAnchor.constraint(
                equalTo: view.readableContentGuide.leadingAnchor , constant: 10),
            notificationButton.trailingAnchor.constraint(
                equalTo: view.readableContentGuide.trailingAnchor , constant: -10),
            notificationButton.topAnchor.constraint(equalTo: timeButton.bottomAnchor , constant: 20),
            notificationButton.heightAnchor.constraint(equalToConstant: 50),
            
            
            timePicker.leadingAnchor.constraint(
                equalTo: view.readableContentGuide.leadingAnchor , constant: 10),
            timePicker.trailingAnchor.constraint(
                equalTo: view.readableContentGuide.trailingAnchor , constant: -10),
            timePicker.topAnchor.constraint(equalTo: notificationButton.bottomAnchor , constant: 20),
            timePicker.heightAnchor.constraint(equalToConstant: 300),
            
            
            doneButton.leadingAnchor.constraint(
                equalTo: view.readableContentGuide.leadingAnchor , constant: 10),
            doneButton.trailingAnchor.constraint(
                equalTo: view.readableContentGuide.trailingAnchor , constant: -10),
            doneButton.heightAnchor.constraint(equalToConstant: 50),
            doneButton.bottomAnchor.constraint(equalTo: view.readableContentGuide.bottomAnchor  ,constant:  -20 ),
            
        ])
        
        NSLayoutConstraint.activate(constraints)
    }
    
    func updateUI() {
        
        view.backgroundColor = .white
        
        
        titleTextField.attributedPlaceholder =   NSAttributedString(
            string: "Enter title",
            attributes: [NSAttributedString.Key.foregroundColor: UIColor.black]
        )
        
        titleTextField.textColor = .black
        
        titleTextField.delegate = self
        
        notificationButton.contentHorizontalAlignment = .left
        
        notificationButton.setTitle(" Set alert", for: .normal)
        
        notificationButton.setTitleColor(.black, for: .normal)
        
        notificationButton.addTarget(self, action: #selector(notificationButtonAction), for: .touchUpInside)
        
        timeButton.addTarget(self, action: #selector(timeButtonAction), for: .touchUpInside)
        
        timeButton.contentHorizontalAlignment = .left
        
        timeButton.setTitleColor(.black, for: .normal)
        
        timeButton.setTitle(" Set time", for: .normal)
        
        dropDown.anchorView = notificationButton
        
        dropDown.bottomOffset = CGPoint(x: 0 , y: notificationButton.frame.minX + 60 )
        
        dropDown.dataSource = [ "10 Minutes", "15 Minutes", "20 Minutes","25 Minutes" , "30 Minutes" , "35 Minutes" , "40 Minutes" , "45 Minutes" , "50 Minutes" , "55 Minutes" , "60 Minutes"]
        
        dropDown.selectionAction = { [unowned self] (index: Int, item: String) in
            
            print("the minutes are \((index + 2) * 5)")
            notificationButton.setTitle("Alert before \(item)", for: .normal)
            alertTime = -((index + 2) * 5)
        }
        
        openTimePicker()
        
        doneButton.setTitleColor(.black, for: .normal)
        
        doneButton.setTitle("Save", for: .normal)
        
        
        if let title =  textFieldTitle {
            titleTextField.text = title
            self.doneButton.isHidden = true
            self.timePicker.isHidden = true
            notificationButton.isUserInteractionEnabled = false
            titleTextField.isUserInteractionEnabled = false
            timeButton.isUserInteractionEnabled = false
            timeButton.isHidden = true
            notificationButton.isHidden = true
        }
        
        if let eventTime = eventTime {
            timeButton.isHidden = false
            timeButton.setTitle(eventTime, for: .normal)
        }
        
        if let alert = alert {
            notificationButton.isHidden = false
            notificationButton.setTitle(alert, for: .normal)
        }
        
        doneButton.addTarget(self, action: #selector(doneButtonAction), for: .touchUpInside)
    }
    
    
    func addTapGesture() {
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(hideKeyboard))
        tapGesture.cancelsTouchesInView = true
        view.addGestureRecognizer(tapGesture)
    }
    
    @objc func hideKeyboard() {
        view.endEditing(true)
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    
    @objc func notificationButtonAction() {
        
        view.endEditing(true)
        dropDown.show()
        
    }
    
    @objc func timeButtonAction() {
        
        print("time button action")
        view.endEditing(true)
        timePicker.isHidden.toggle()
        
    }
    
    @objc func doneButtonAction() {
        
        requestAuthorization { [self] request in
            if request {
                self.scheduleLocalNotification()
            }
        }
    }
    
    private func scheduleLocalNotification() {
        
        DispatchQueue.main.async { [self] in
            
            
            if let hours = hours  , let minutes = minutes  {
                
                if let text  = self.titleTextField.text , !text.isEmpty  {
                    
                    let notificationContent = UNMutableNotificationContent()
                    
                    DispatchQueue.main.async { [self] in
                        notificationContent.title = "Calendar"
                        notificationContent.body = text
                        
                        if let notificationText = notificationButton.titleLabel?.text  , notificationText != " Set alert"{
                            
                            notificationContent.userInfo = ["time":[ text ,timeButton.titleLabel?.text , notificationText ]]
                            
                        } else {
                            notificationContent.userInfo = ["time":[ text ,timeButton.titleLabel?.text , "" ]]
                        }
                        
                        let calendar = Calendar.current
                        
                        let new = Calendar.current.dateComponents([.day , .year , .month ], from: self.selectedDate)
                        
                        let components = DateComponents(year: new.year ?? 2021 , month: new.month ?? 07, day: new.day ?? 07, hour: hours , minute: minutes ) // Set the date here when you want Notification
                        let date = calendar.date(from: components)
                        
                        let finalDate = Calendar.current.date(
                            byAdding: .minute,
                            value: alertTime ?? 0,
                            to: date ?? Date())
                        
                        let comp2 = calendar.dateComponents([.year,.month,.day,.hour,.minute], from: finalDate ?? Date())
                        
                        let notificationTrigger =  UNCalendarNotificationTrigger(dateMatching: comp2, repeats: false)
                                                
                        let notificationRequest = UNNotificationRequest(identifier: "cocoacasts_local_notification", content: notificationContent, trigger: notificationTrigger)
                        
                        UNUserNotificationCenter.current().add(notificationRequest) { (error) in
                            if let error = error {
                                print("Unable to Add Notification Request (\(error), \(error.localizedDescription))")
                            }
                            
                            DispatchQueue.main.async {
                                let ac = UIAlertController(title: "Event status", message: "Event created successfully", preferredStyle: .alert)
                                ac.addAction(UIAlertAction(title: "ok", style: .default, handler: { _ in
                                    self.navigationController?.popToRootViewController(animated: true)
                                }))
                                self.present(ac, animated: true)
                            }
                            
                            
                        }
                    }
                    
                } else {
                    
                    showAlert(title: "No Title", reason: "please select the title for notificaiton")
                    
                }
                
            } else  {
                showAlert(title: "Invalid Time", reason: "please select the time for notificaiton")
            }
            
            
        }
        
    }
    
    
    func requestAuthorization(completion: @escaping  (Bool) -> Void) {
        UNUserNotificationCenter.current()
            .requestAuthorization(options: [.alert, .sound, .badge]) { granted, _  in
                // TODO: Fetch notification settings
                completion(granted)
            }
    }
    
    
    
    func openTimePicker()  {
        timePicker.datePickerMode = .time
        
        timePicker.preferredDatePickerStyle = .wheels
        
        timePicker.backgroundColor = UIColor.white
        self.view.addSubview(timePicker)
        timePicker.addTarget(self, action: #selector(startTimeDiveChanged), for: UIControl.Event.valueChanged)
    }
    
    @objc func startTimeDiveChanged(sender: UIDatePicker) {
        
        
        let new = Calendar.current.dateComponents([.day , .month , .hour , .minute ], from: sender.date )
        
        let formatter = DateFormatter()
        formatter.timeStyle = .short
        timeButton.setTitle("Event time : \(formatter.string(from: sender.date))", for: .normal)
        
        self.hours = new.hour ?? 0
        
        self.minutes = new.minute ?? 0
        
    }
    
    
    func showAlert(title:String ,reason:String) {
        
        DispatchQueue.main.async {
            let ac = UIAlertController(title: title, message: reason, preferredStyle: .alert)
            ac.addAction(UIAlertAction(title: "OK", style: .default))
            self.present(ac, animated: true)
        }
        
    }
    
    
    
}



extension newEventViewController : UITextFieldDelegate {
    
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        
        titleTextField.resignFirstResponder()
        
        return true
    }
    
    
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if range.location == 0 && string == " " {
            return false
        }
        if (textField.text?.count == 0) && string == " " {
            return false
        }
        return true
    }
    
    
}
